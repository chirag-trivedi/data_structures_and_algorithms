# LC 63

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        
        
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        
        if obstacleGrid[0][0] == 1:
            return 0
        
        table = [[0 for j in range(n)] for i in range(m)]
        
        
        
        for i in range(0,n,1):
            if obstacleGrid[0][i] == 1:
                break
            else:
                table[0][i] = 1
            
        for j in range(0,m,1):
            if obstacleGrid[j][0] == 1:
                break
            else:
                table[j][0] = 1
            
        
        for row in range(1,m,1):
            for col in range(1,n,1):
                
                if obstacleGrid[row][col] == 1:
                    continue
                else:
                    table[row][col] = table[row-1][col] + table[row][col-1]
                    
        return table[m-1][n-1]
    
# time complexity O(mn)
# space complexity O(mn)
            